\documentclass{article}
\usepackage{graphicx} % Required for inserting images
\usepackage{tocloft}
\usepackage{enumitem}
\setlength{\parindent}{0pt} % Remove paragraph indentations
\renewcommand{\cftsecleader}{\cftdotfill{\cftdotsep}}
\renewcommand{\cftsecfont}{\normalfont}
\renewcommand{\cftsubsecfont}{\normalfont}
\renewcommand{\cftsecpagefont}{\normalfont}
\renewcommand{\cftsubsecpagefont}{\normalfont}

\begin{document}

\begin{titlepage}
    \begin{center}
        \vspace*{1cm}
            
        \Huge
        \textbf{COL876: \\ Special Topics in Formal Methods}
        
        \vspace{1cm}
        \LARGE
        Project 1: CDCL Based SAT Solver
        \vspace{1cm}
        
        \Large
        \textbf{October 2024}
        \vspace{1cm}
  
        Abhinav Rajesh Shripad (2022CS11596)\\
        
        \vfill
        \begin{figure}[h!]
            \centering
            \includegraphics[scale=0.25]{front_page.png}

            \label{fig:enter-label}
        \end{figure}
            
        \vspace{0.8cm}
            
    \end{center}
\end{titlepage}

\clearpage


\vspace{0.5cm}
\tableofcontents
\clearpage

\section{Introduction}
% \addcontentsline{toc}{section}{1. Introduction}

This report presents the design, implementation, and analysis of a SAT solver based on the Conflict-Driven Clause Learning (CDCL) procedure. The primary objective of this project is to develop an efficient SAT solver capable of checking the satisfiability of CNF formulas in DIMACS format. Our implementation aims to handle complex formulas with at 150 variables.

Our project focuses on two critical components of the CDCL procedure:

\begin{itemize}
    \item \textbf{Pick Branching Variable}: We discuss two heuristics for selecting the branching variable:
    \begin{itemize}
        \item \textbf{Jeroslow Wang One Sided Solver} \cite{jeroslow1990solving}: This method chooses the variable based on the Jeroslow-Wang rule, which assigns weights to variables depending on their occurrence in clauses, aiming to maximize the likelihood of satisfiability.
        \item \textbf{Dynamic Largest Individual Sum Solver} \cite{moskewicz2001chaff}: This heuristic selects the variable based on the dynamic sum of individual clauses, favoring the variable with the largest influence.
    \end{itemize}
    We compare the performance of these two heuristics and implement a hybrid heuristic that combines the strengths of both approaches.
    
    \item \textbf{Conflict Analysis}: For conflict analysis, we have implemented:
    \begin{itemize}
        \item \textbf{Last UIP Cut}: This approach analyzes conflicts by tracing the conflict graph and selecting the last UIP for clause learning.
        \item \textbf{Heuristic with Probabilistic UIP Selection}: In this method, we probabilistically choose between the last UIP and the first UIP for clause learning, based on some pre-defined probability distribution.
    \end{itemize}
\end{itemize}

\section{Notation}
The following table summarizes the notations used in this report:

\begin{table}[h]
    \centering
    \begin{tabular}{|c|l|}
        \hline
        \textbf{Symbol} & \textbf{Description} \\ \hline
        \texttt{TRUE}       &  Any variable/clause/formula which evaluates to True under the partial assignment\\ \hline
        \texttt{FALSE}      & Any variable/clause/formula which evaluates to False under the partial assignment \\ \hline
        \texttt{UNASSIGN}   & Any variable/clause/formula which evaluates to neither \texttt{TRUE} nor \texttt{FALSE} \\ \hline
        $n$       & Number of variables in a $F_{CNF}$ \\ \hline
        $m$  & Number of clauses in a $F_{CNF} $\\ \hline
        $F$            & The Boolean formula in CNF format \\ \hline
        $\alpha$       & A truth assignment for variables \\ \hline
    \end{tabular}
    \caption{Table of Notations}
    \label{tab:notations}
\end{table}


\section{Implementation Details}
\subsection{Implication Graph Implementation}
We discuss how Implication Node is implemented and why certain attributes are needed and how it helps in easier update and unit propagation and conflict analysis in Implication Graph.

\begin{figure}[h]
    \centering
    \includegraphics[width=0.40\textwidth]{Implication Node.png}
    \label{fig:Implication Node Attributes} % Label for referencing the figure
\end{figure}

\begin{itemize}
    \item \textbf{Unit Propagation}: While unit propagation is done, if any clause(including learned clauses) evaluates to \texttt{FALSE}, we have reached a \textbf{conflict}, 
    
\end{itemize}


\section{Pick Branching Variable Heuristic}
\subsection{Dynamic Largest Individual Sum Solver}
We implement the simplest version of \textbf{DLIS}, were for each \texttt{UNASSIGN} variable, we count the number of its occurrences with either parity in \texttt{UNASSIGN} clauses, and chose that variable and its assignment which occurs with maximum number. 

We can think of it as, we append to our partial assignment a variable which decreases the number of \texttt{UNASSIGN} clauses the most. This also serves as an intuition for the heuristics.

\subsection{Jeroslow Wang One Sided Solver}
This is my favourite heuristics, let $S$ be the set of disjunctive clauses in \textbf{$F_{CNF}$}, we define the weight of $S$ to be as 
$$W(S) = \sum_{p} \frac{n_{p}}{2^{p}}$$
where $n_p$ is the number of clauses in $S$ with length $p$ in $S$, in our Project $p$ is always 3. We now define for each \texttt{UNASSIGN} literal $x$ and its assignment, we define $i$ $W(S_{x}^{i})$ as weight of subset of $S$ in which remains \texttt{UNASSIGN} after assigning $x$ as $i$. We choose an literal $x$ and its assignment $i$ for branching such that it makes $W(S_{x}^{i})$ maximum. Ties are resolved arbitrarily.
\\
We can see that an clause with size $p$ rules out exactly $2^{n-p}$ assignments from the possible set of truth assignments. Thus S rules out \textbf{at most} $\sum_{p}n_{p}2^{n-p} = 2^{n}W(S)$. Thus we choose a literal and an assignment which minimizes the weight, thus ruling out a very less number of assignments, thus making it very likely to be \textbf{SAT}. \cite{jeroslow1990solving}


\section{Conflict Analysis Heuristic}

\subsection{Last UIP Cut}
The Last UIP (Unique Implication Point) Cut is a crucial technique in conflict analysis for SAT solvers. When a conflict occurs during the solving process, the Last UIP Cut helps in determining which variables to backtrack to in order to learn a new clause that can prevent the same conflict from occurring again.
The process involves analyzing the implication graph created during the solving process. The Last UIP is identified as the most recent point in the graph where a unique implication leads to the conflict. By backtracking to this point, the solver can derive a new clause that excludes the conflicting assignment, thus improving the efficiency of the search.
In our implementation, we ensure that the Last UIP is correctly identified by traversing the implication graph and maintaining a record of the assignments made. This allows us to effectively learn from conflicts and enhance the solver's performance.
% Note: Ensure that the implementation of the analyze_conflict method correctly handles the identification of the Last UIP.


\section{Experimental Setup}
\subsection{Random 3-SAT Instance Generation}
\subsection{Testing Methodology}

\section{Results and Analysis}
\subsection{Performance Metrics}
\subsection{Time Complexity Analysis}
\subsection{Heuristic Comparisons}

\section{Discussion}
\subsection{Interpretation of Results}
\subsection{Strengths and Limitations}
\subsection{Future Improvements}

\section{Conclusion}
\addcontentsline{toc}{section}{Conclusion}

% \section{References}
\bibliographystyle{plain} % or any other style you prefer
\bibliography{references} % references.bib is the name of your .bib file

\end{document}
